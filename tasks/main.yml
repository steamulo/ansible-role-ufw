---

- name: Update apt-cache if necessary
  apt: update_cache=yes cache_valid_time=3600
  when: not ansible_check_mode

- name: Install ufw packages
  apt: name=ufw state=latest
  when: not ansible_check_mode

# Store current rules in a variable
- name: Retrieve current ufw rules
  command: ufw status numbered
  register: ufw_current_rules
  when: not ansible_check_mode

# Parse the current rules and extract the rule numbers
# of the rules that need to be removed
- name: Find rule numbers to remove
  set_fact:
    ufw_rule_numbers_to_remove: "{{ ufw_rule_numbers_to_remove | default([]) + [item.split()[0]] }}"
  when: "'ALLOW' in item and not item in ufw_desired_rules"
  with_items: "{{ ufw_current_rules.stdout_lines }}"

# Remove only the rules that need to be removed
- name: Remove unnecessary ufw rules
  command: "ufw delete {{ item }}"
  with_items: "{{ ufw_rule_numbers_to_remove }}"
  when: not ansible_check_mode

# Add the desired rules if they don't already exist
- name: Add missing ufw rules
  ufw: rule="{{ item }}"
  with_items: "{{ ufw_desired_rules }}"
  when: "'ALLOW' in item and not item in ufw_current_rules.stdout_lines"
  when: not ansible_check_mode

#- name: Reset ufw settings
#  ufw: state=reset
#  when: not ansible_check_mode

- name: Enable/Disable logging
  ufw: logging={{ ufw_logging }}
  when: not ansible_check_mode

- name: Allow all traffic for whitelisted ips
  ufw: rule=allow src={{ item }}
  with_items: "{{ ufw_whitelisted_addresses | union(ufw_whitelisted_addresses_extra) }}"
  when: not ansible_check_mode

- name: Allow outgoing traffic on authorized out ports
  ufw: rule=allow to_ip={{ item.to_ip | default ("any") }} to_port={{ item.to_port | default(None) }} proto={{ item.proto }} from_ip={{ item.from_ip | default("any") }} from_port={{ item.from_port | default(None) }} direction=out
  with_items: "{{ ufw_whitelisted_out_ports | union(ufw_whitelisted_out_ports_extra) }}"
  when: not ansible_check_mode

- name: Allow incoming traffic on authorized in ports
  ufw: rule=allow from_ip={{ item.from_ip | default ("any") }} to_port={{ item.to_port | default(None) }} proto={{ item.proto }} to_ip={{ item.to_ip | default ("any") }} from_port={{ item.from_port | default(None) }} direction=in
  with_items: "{{ ufw_whitelisted_in_ports | union(ufw_whitelisted_in_ports_extra) }}"
  when: not ansible_check_mode

- name: Add advanced ufw before rules
  blockinfile: dest=/etc/ufw/before.rules insertbefore="COMMIT" state=present block="{{ advanced_ufw_before_rules }}"
  when: not ansible_check_mode

- name: Add advanced ufw after rules
  blockinfile: dest=/etc/ufw/after.rules insertbefore="COMMIT" state=present block="{{ advanced_ufw_after_rules }}"
  when: not ansible_check_mode

- name: Drop all inputs ipv4
  lineinfile: dest=/etc/ufw/after.rules insertbefore="COMMIT" state=present line="-A ufw-reject-input -j DROP"
  when: "{{root_nbd}} and not ansible_check_mode"

- name: Drop all inputs ipv6
  lineinfile: dest=/etc/ufw/after6.rules insertbefore="COMMIT" state=present line="-A ufw6-reject-input -j DROP"
  when: "{{root_nbd}} and not ansible_check_mode"

- name: Allow all outgoing traffic
  ufw: policy=allow direction=outgoing
  when: not ansible_check_mode

- name: Deny or Allow all incoming traffic
  ufw: policy={{ root_nbd | ternary('allow','deny') }} direction=incoming
  when: not ansible_check_mode

# Ensure no iptable-persitent, as its handled by ufw
- name: Install iptables-persistent if necessary
  apt: name=iptables-persistent state=absent

- name: Enable firewall
  ufw: state=enabled
  when: not ansible_check_mode
